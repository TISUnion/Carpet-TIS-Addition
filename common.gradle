apply plugin: 'maven-publish'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

repositories {
	maven {
		url = 'https://masa.dy.fi/maven'
	}
	maven {
		url = 'https://maven.fallenbreath.me/releases'
	}
	maven {
		url = 'https://maven.fallenbreath.me/jitpack'
	}
	maven {
        url = 'https://www.cursemaven.com'
	}
	maven {
		url = 'https://api.modrinth.com/maven'
	}
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
	modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}
configurations {
	modCompileOnly.exclude group: 'com.github.2No2Name', module: 'McTester'
	modImplementation.exclude group: 'com.github.2No2Name', module: 'McTester'
}

final enableLithiumInRuntime = false

dependencies {
	// loom
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// mods
	if (project.carpet_core_version.matches('^com.github.[a-zA-Z0-9_-]+:fabric-carpet:[a-z0-9]+$')) {
		modImplementation project.carpet_core_version  // jitpack
	} else {
		modImplementation "carpet:fabric-carpet:${project.carpet_core_version}"  // masa's maven
	}
	if (enableLithiumInRuntime && 11500 <= mcVersion) {
		modImplementation "${project.lithium_dependency}"
		if (11500 <= mcVersion && mcVersion < 11600) {
			// https://github.com/CaffeineMC/lithium-fabric/blob/1.15.x/fabric/build.gradle#L50
			runtimeOnly "com.moandjiezana.toml:toml4j:0.7.2"
			runtimeOnly "com.github.Fallen-Breath:Fabric-ASM:v2.0.1"  // v2.0 build fails
		}
	} else {
		modCompileOnly "${project.lithium_dependency}"
	}

	// runtime mods
	if (mcVersion < 11904) {
		modRuntimeOnly("com.github.Fallen-Breath:lazydfu:${mcVersion < 11900 ? "0.1.2" : "a7cfc44c0c"}")
	}

	// library mods
	include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))
	if (mcVersion < 12005) {
		include("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")
	}

	// libraries
	shadow(implementation("net.fabricmc:tiny-mappings-parser:0.3.0+build.17"))  // not included in fabric loader 0.15.0+, so we need to shadow it
	testImplementation "junit:junit:${project.junit_version}"
}

String MIXIN_CONFIG_PATH = 'carpet-tis-addition.mixins.json'
String LANG_DIR = 'assets/carpettisaddition/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}
JavaVersion MIXIN_COMPATIBILITY_LEVEL = JAVA_COMPATIBILITY

loom {
	accessWidenerPath = file("carpet-tis-addition.accesswidener")

	def commonVmArgs = ['-Dmixin.debug.export=true']
	if (mcVersion < 11904 && !(enableLithiumInRuntime && 11700 <= mcVersion && mcVersion < 12006)) {
		// Carpet 1.4.100+v230314 for mc1.19.4 and above
		// fail to pass the check on at MinecraftServer_pingPlayerSampleLimit#modifyPlayerSampleLimit
		// see https://github.com/gnembon/fabric-carpet/pull/1938
		// Lithium in mc [1.17.1, 1.20.6) do not add `expect = 0` on its `mixin.block.hopper.TypeFilterableListMixin`
		// which will cause the failure since the `getAllOfType` method
		// is overwritten by its `mixin.collections.entity_filtering.TypeFilterableListMixin`
		commonVmArgs.add('-Dmixin.debug.countInjections=true')
	}
	runConfigs.configureEach {
		runDir '../../run'
		vmArgs commonVmArgs
		ideConfigGenerated true
	}

	runs {
		def auditVmArgs = [*commonVmArgs, '-Dcarpettisaddition.mixin_audit=true']
		serverMixinAudit {
			server()
			vmArgs auditVmArgs
			ideConfigGenerated false
		}
		clientMixinAudit {
			client()
			vmArgs auditVmArgs
			ideConfigGenerated false
		}
	}
}

shadowJar {
	configurations = [project.configurations.shadow]
	exclude("META-INF")
	archiveClassifier.set('shadow')
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
tasks.withType(ShadowJar).configureEach {
	enableRelocation true
	relocationPrefix 'carpettisaddition.libs'
}

remapJar {
	dependsOn(shadowJar)
	mustRunAfter(shadowJar)
	inputFile = shadowJar.archiveFile
}

String modVersionSuffix = ''
String artifactVersion = project.mod_version
String artifactVersionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
	String buildNumber = System.getenv("BUILD_ID")
	modVersionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
	artifactVersionSuffix = '-SNAPSHOT'  // A non-release artifact is always a SNAPSHOT artifact
}
String fullModVersion = project.mod_version + modVersionSuffix
String fullProjectVersion, fullArtifactVersion

// Example version values:
//   project.mod_version     1.0.3                      (the base mod version)
//   modVersionSuffix        +build.88                  (use github action build number if possible)
//   artifactVersionSuffix   -SNAPSHOT
//   fullModVersion          1.0.3+build.88             (the actual mod version to use in the mod)
//   fullProjectVersion      v1.0.3-mc1.15.2+build.88   (in build output jar name)
//   fullArtifactVersion     1.0.3-mc1.15.2-SNAPSHOT    (maven artifact version)

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
	// move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
	base.archivesName = project.archives_base_name + '-mc' + project.minecraft_version
	fullProjectVersion = 'v' + project.mod_version + modVersionSuffix
	fullArtifactVersion = artifactVersion + artifactVersionSuffix
} else {
	base.archivesName = project.archives_base_name
	fullProjectVersion = 'v' + project.mod_version + '-mc' + project.minecraft_version + modVersionSuffix
	fullArtifactVersion = artifactVersion + '-mc' + project.minecraft_version + artifactVersionSuffix
}
version = fullProjectVersion

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
	from "carpet-tis-addition.accesswidener"

	inputs.property "id", project.mod_id
	inputs.property "name", project.mod_name
	inputs.property "version", fullModVersion
	inputs.property "minecraft_dependency", project.minecraft_dependency

	filesMatching("fabric.mod.json") {
		def valueMap = [
				"id": project.mod_id,
				"name": project.mod_name,
				"version": fullModVersion,
				"carpet_dependency": project.carpet_dependency,
				"minecraft_dependency": project.minecraft_dependency,
		]

		String lc = project.getProperties().getOrDefault('lithium_confliction', '<0.0.0')
		if (lc.contains(',')) {
			def arr = '[' + lc.split(',').collect { s -> '"' + s + '"'}.join(', ') + ']'
			filter { s -> s.replace('"${lithium_confliction}"', arr) }
		} else {
			valueMap.put('lithium_confliction', lc)
		}

		expand valueMap
	}

	filesMatching(MIXIN_CONFIG_PATH) {
		filter { s -> s.replace('{{COMPATIBILITY_LEVEL}}', "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}") }
	}
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
	targetSourceSets = [sourceSets.main]
    inputDir = LANG_DIR
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
	if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
		// suppressed "source/target value 8 is obsolete and will be removed in a future release"
		options.compilerArgs << '-Xlint:-options'
	}
}

java {
	sourceCompatibility = JAVA_COMPATIBILITY
	targetCompatibility = JAVA_COMPATIBILITY

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from(rootProject.file('LICENSE')) {
		rename { "${it}_${project.archives_base_name}" }
	}
}

// https://github.com/hierynomus/license-gradle-plugin
license {
	// use "gradle licenseFormat" to apply license headers
	header = rootProject.file('HEADER.txt')
	include '**/*.java'
	skipExistingHeaders = true

	headerDefinitions {
		// ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
		// modification: add a newline at the end
		SLASHSTAR_STYLE_NEWLINE {
			firstLine = "/*"
			beforeEachLine = " * "
			endLine = " */" + System.lineSeparator()
			afterEachLine = ""
			skipLinePattern = null
			firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
			lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
			allowBlankLines = false
			isMultiline = true
			padLines = false
		}
	}
	mapping {
		java = 'SLASHSTAR_STYLE_NEWLINE'
	}
	ext {
		name = project.mod_name
		author = 'Fallen_Breath'
		year = Calendar.getInstance().get(Calendar.YEAR).toString()
	}
}
classes.dependsOn licenseFormatMain
testClasses.dependsOn licenseFormatTest

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
            artifactId = base.archivesName.get()
			version = fullArtifactVersion
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			url = fullArtifactVersion.endsWith("SNAPSHOT") ? "https://maven.fallenbreath.me/snapshots" : "https://maven.fallenbreath.me/releases"
			credentials(PasswordCredentials) {
				username = 'fallen'
				password = System.getenv("FALLENS_MAVEN_TOKEN")
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}
